from flask import Blueprint

def {{ vars.create_blueprint_from_app|base_name }}(app):
    """Create {{ vars.package }} blueprint."""
    blueprint = app.extensions["{{ vars.flask_extension_name }}"].resource.as_blueprint()
    blueprint.record_once(init_{{ vars.create_blueprint_from_app|base_name }})

    #calls record_once for all other functions starting with "init_addons_"
    #https://stackoverflow.com/questions/58785162/how-can-i-call-function-with-string-value-that-equals-to-function-name
    funcs = globals()
    funcs = [v for k, v in funcs.items() if k.startswith("init_addons_{{ vars.extension_suffix }}") and callable(v)]
    for func in funcs:
        blueprint.record_once(func)

    return blueprint

def init_{{ vars.create_blueprint_from_app|base_name }}(state):
    """Init app."""
    app = state.app
    ext = app.extensions["{{ vars.flask_extension_name }}"]

    # register service
    sregistry = app.extensions["invenio-records-resources"].registry
    sregistry.register(ext.service, service_id="{{ vars.service_id }}")

    # Register indexer
    if hasattr(ext.service, "indexer"):
        iregistry = app.extensions["invenio-indexer"].registry
        iregistry.register(ext.service.indexer, indexer_id="{{ vars.flask_extension_name }}")

def {{ vars.create_blueprint_from_app|base_name }}Ext(app):
    """Create {{ vars.package }}-ext blueprint."""
    blueprint = Blueprint(
        '{{ vars.flask_extension_name }}-ext',
        __name__,
        url_prefix='{{ vars.flask_extension_name }}')
    blueprint.record_once(init_{{ vars.create_blueprint_from_app|base_name }})

    #calls record_once for all other functions starting with "init_app_addons_"
    #https://stackoverflow.com/questions/58785162/how-can-i-call-function-with-string-value-that-equals-to-function-name
    funcs = globals()
    funcs = [v for k, v in funcs.items() if k.startswith("init_app_addons_{{ vars.extension_suffix }}") and callable(v)]
    for func in funcs:
        blueprint.record_once(func)

    return blueprint

{{ vars.invenio_views_extra_code }}