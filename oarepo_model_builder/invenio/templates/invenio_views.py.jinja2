from flask import Blueprint

def {{ python.create_blueprint_from_app|base_name }}(app):
    """Create {{ python.package_name }} blueprint."""
    if app.config.get('{{ python.config_resource_register_blueprint_key }}', True):
        blueprint = app.extensions["{{ python.flask_extension_name }}"].resource.as_blueprint()
    else:
        blueprint = Blueprint(
            '{{ python.flask_extension_name }}',
            __name__,
            url_prefix='/empty/{{ python.flask_extension_name }}')
    blueprint.record_once(init)

    #calls record_once for all other functions starting with "init_addons_"
    #https://stackoverflow.com/questions/58785162/how-can-i-call-function-with-string-value-that-equals-to-function-name
    funcs = globals()
    funcs = [v for k, v in funcs.items() if k.startswith("init_addons_") and callable(v)]
    for func in funcs:
        blueprint.record_once(func)

    return blueprint

def init(state):
    """Init app."""
    app = state.app
    ext = app.extensions["{{ python.flask_extension_name }}"]

    # register service
    sregistry = app.extensions["invenio-records-resources"].registry
    sregistry.register(ext.service, service_id="{{ python.flask_extension_name }}")

    # Register indexer
    iregistry = app.extensions["invenio-indexer"].registry
    iregistry.register(ext.service.indexer, indexer_id="{{ python.flask_extension_name }}")


{{ settings.python.invenio_views_extra_code }}